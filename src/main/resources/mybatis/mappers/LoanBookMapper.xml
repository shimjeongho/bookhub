<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="kr.co.bookhub.mapper.LoanBookMapper">

	<!-- 
		List<LoanHistory> getAllBookByUserId(String id);
	 -->
	<select id="getAllBookByUserId" resultType="LoanHistory">
		SELECT
			B.BOOK_NO					AS "book.no"
			, L.LOAN_NO					AS no
			, B.BOOK_TITLE				AS "book.title"
			, B.BOOK_AUTHOR				AS "book.author"
			, B.BOOK_PUBLISHER			AS "book.publisher"
			, B.BOOK_COVER_IMAGE_PATH	AS "book.coverImagePath"
			, L.LOAN_DATE				AS loanDate
			, L.DUE_DATE				AS dueDate
			, L.LOAN_STATUS				AS loanStatus
			, L.IS_EXTENSION			AS isExtension
		FROM BOOKHUB_BOOKS B, BOOKHUB_LOAN_HISTORIES L
		WHERE L.USER_ID = #{id}
		AND B.BOOK_NO = L.BOOK_NO
	</select>
	 
	<!--  
		List<LoanHistory> getSortedLoanBooksByUserId(Map<String, Object> condition);
	 -->
	<select id="getSortedLoanBooksByUserId" parameterType="map" resultType="LoanHistory">
		SELECT
			B.BOOK_NO                AS "book.no"
			, L.LOAN_NO              AS no
			, B.BOOK_TITLE           AS "book.title"
			, B.BOOK_AUTHOR          AS "book.author"
			, B.BOOK_PUBLISHER       AS "book.publisher"
			, B.BOOK_COVER_IMAGE_PATH AS "book.coverImagePath"
			, L.LOAN_DATE            AS loanDate
			, L.DUE_DATE             AS dueDate
			, L.LOAN_STATUS          AS loanStatus
			, L.IS_EXTENSION         AS isExtension
		FROM BOOKHUB_BOOKS B, BOOKHUB_LOAN_HISTORIES L
		WHERE L.USER_ID = #{id}
		AND B.BOOK_NO = L.BOOK_NO
		AND L.LOAN_STATUS IN ('L', 'D')
		ORDER BY CASE WHEN L.LOAN_STATUS = 'D' THEN 0 ELSE 1 END, L.LOAN_DATE DESC 
		OFFSET #{offset} ROWS
		FETCH NEXT #{rows} ROWS ONLY
	</select>
	 
	<!--  
		List<LoanHistory> getSortedReturnBooksByUserId(Map<String, Object> condition);
	 -->
	<select id="getSortedReturnBooksByUserId">
		SELECT
			B.BOOK_NO                AS "book.no"
			, L.LOAN_NO              AS no
			, B.BOOK_TITLE           AS "book.title"
			, B.BOOK_AUTHOR          AS "book.author"
			, B.BOOK_PUBLISHER       AS "book.publisher"
			, B.BOOK_COVER_IMAGE_PATH AS "book.coverImagePath"
			, L.RETURN_DATE          AS returnDate
			, L.LOAN_DATE            AS loanDate
			, L.DUE_DATE             AS dueDate
			, L.LOAN_STATUS          AS loanStatus
			, L.IS_EXTENSION         AS isExtension
		FROM BOOKHUB_BOOKS B, BOOKHUB_LOAN_HISTORIES L
		WHERE L.USER_ID = #{id}
		AND B.BOOK_NO = L.BOOK_NO
		AND L.LOAN_STATUS IN ('R', 'P')
		ORDER BY CASE WHEN L.LOAN_STATUS = 'P' THEN 0 ELSE 1 END, L.LOAN_DATE DESC 
		OFFSET #{offset} ROWS
		FETCH NEXT #{rows} ROWS ONLY
	</select>
	
	<!--  
		List<LoanHistory> getAllReturnBooks();
	-->
	<select id="getAllReturnBooks" resultType="LoanHistory">
		SELECT
		    LOAN_NO
		    , LOAN_DATE
		    , RETURN_DATE
		    , DUE_DATE
		    , LOAN_STATUS
		    , USER_ID
		    , LIB_NO
		    , BOOK_NO
		    , IS_EXTENSION
		FROM BOOKHUB_LOAN_HISTORIES
		WHERE LOAN_STATUS = 'P'
	</select>
	 
	<!--  
		int getLoanTotalRows(String id);
	 -->
	<select id="getLoanTotalRows" parameterType="String">
		SELECT
			COUNT(*)
		FROM
			BOOKHUB_LOAN_HISTORIES
		WHERE USER_ID = #{id}
		AND LOAN_STATUS IN ('L', 'D')
	</select>
	 
	<!--  
		int getReturnTotalRows(String id);
	 -->
	<select id="getReturnTotalRows" parameterType="String">
		SELECT
			COUNT(*)
		FROM
			BOOKHUB_LOAN_HISTORIES
		WHERE USER_ID = #{id}
		AND LOAN_STATUS = 'P'
	</select>
	 
	<!--  
		void updateDelayBooksStatus(String id);
	 -->
	<update id="updateDelayBooksStatus">
		UPDATE BOOKHUB_LOAN_HISTORIES
		SET LOAN_STATUS = 'D'
		WHERE DUE_DATE &lt; SYSDATE
		AND USER_ID = #{id}
		AND LOAN_STATUS = 'L'
	</update>
	
	<!-- 
		void updateReturnBook(String loanNo);
	 -->
	<update id="updateReturnBook">
		UPDATE BOOKHUB_LOAN_HISTORIES
		    SET LOAN_STATUS = 'R'
		    WHERE LOAN_NO = #{loanNo}
	</update>
	 
	<!--  
		List<LoanHistory> getDelayBookByUserId(String id);
	 -->
	<select id="getDelayBookByUserId" resultType="LoanHistory">
		SELECT
			B.BOOK_NO                AS "book.no"
			, L.LOAN_NO              AS no
			, B.BOOK_TITLE           AS "book.title"
			, B.BOOK_AUTHOR          AS "book.author"
			, B.BOOK_PUBLISHER       AS "book.publisher"
			, B.BOOK_COVER_IMAGE_PATH AS "book.coverImagePath"
			, L.LOAN_DATE            AS loanDate
			, L.DUE_DATE             AS dueDate
			, L.LOAN_STATUS          AS loanStatus
			, L.IS_EXTENSION         AS isExtension
		FROM BOOKHUB_BOOKS B, BOOKHUB_LOAN_HISTORIES L
		WHERE L.USER_ID = #{id}
		AND B.BOOK_NO = L.BOOK_NO
		AND L.LOAN_STATUS = 'D'
	</select>
	 
	<!--  
		LoanHistory getLoanHistoryByLoanNo(String lno);
	 -->
	<select id="getLoanHistoryByLoanNo" resultType="LoanHistory">
		SELECT
			LOAN_NO       AS no
			, LOAN_DATE   AS loanDate
			, RETURN_DATE AS returnDate
			, DUE_DATE    AS due_date
			, LOAN_STATUS AS loanStatus
			, USER_ID     AS "user.id"
			, LIB_NO      AS "library.no"
			, BOOK_NO     AS "book.no"
			, IS_EXTENSION AS isExtension
		FROM BOOKHUB_LOAN_HISTORIES
		WHERE LOAN_NO = #{lno}
	</select>
	
	<!--  
	List<LoanHistory> getLoanHistoryByIdAndBno(@Param("id") String id, @Param("bno") String bno);
	-->
	<select id="getLoanHistoryByIdAndBno" resultType="LoanHistory">
		SELECT
			LOAN_NO        AS no			 
			, LOAN_DATE    AS loanDate
			, RETURN_DATE  AS returnDate
			, DUE_DATE     AS due_date
			, LOAN_STATUS  AS loanStatus
			, USER_ID      AS "user.id"
			, LIB_NO       AS "library.no"
			, BOOK_NO      AS "book.no"
			, IS_EXTENSION AS isExtension
		FROM BOOKHUB_LOAN_HISTORIES
		WHERE USER_ID = #{id}
		AND LOAN_STATUS IN ('L','D','P')
		AND BOOK_NO = #{bno}
	</select>
		 
	<!-- 
		void updateIsExtensionAndDueDateByLoanNo(String lno);
	-->
	<update id="updateIsExtensionAndDueDateByLoanNo">
		UPDATE BOOKHUB_LOAN_HISTORIES
		SET
			IS_EXTENSION = 'Y',
			DUE_DATE = DUE_DATE + 14
		WHERE
			LOAN_NO = #{lno}
	</update>
		 
	<!--  
		void InsertLoanHistoryByBnoAndRnoAndId(String id, String lno, String bno);
	-->
	<insert id="InsertLoanHistoryByBnoAndRnoAndId">
		INSERT INTO BOOKHUB_LOAN_HISTORIES
		(LOAN_NO
		, LOAN_DATE
		, RETURN_DATE
		, DUE_DATE
		, LOAN_STATUS
		, USER_ID
		, LIB_NO
		, BOOK_NO
		, IS_EXTENSION)
		VALUES
		(BOOKHUB_LOAN_HISTORIES_LOAN_NO_SEQ.NEXTVAL
		, SYSDATE
		, NULL
		, SYSDATE + 14
		, 'L'
		, #{id}
		, #{lno}
		, #{bno}
		, 'N')
	</insert>
	
	<!--
		List<LoanHistory> getReturnBookByUserId(String id);
	-->
	<select id="getReturnBookByUserId" resultType="LoanHistory">
		SELECT
			B.BOOK_NO                AS "book.no"
			, L.LOAN_NO              AS no
			, B.BOOK_TITLE           AS "book.title"
			, B.BOOK_AUTHOR          AS "book.author"
			, B.BOOK_PUBLISHER       AS "book.publisher"
			, B.BOOK_COVER_IMAGE_PATH AS "book.coverImagePath"
			, L.LOAN_DATE            AS loanDate
			, L.DUE_DATE             AS dueDate
			, L.RETURN_DATE          AS returnDate
			, L.LOAN_STATUS          AS loanStatus
			, L.IS_EXTENSION         AS isExtension
		FROM BOOKHUB_BOOKS B, BOOKHUB_LOAN_HISTORIES L
		WHERE L.USER_ID = #{id}
		AND B.BOOK_NO = L.BOOK_NO
		AND L.LOAN_STATUS = 'P'
	</select>
		 
	<!-- 
		void updateLoanStatusAndreturnDateByLoanNo(String lno);
	-->
	<update id="updateLoanStatusAndreturnDateByLoanNo">
		UPDATE BOOKHUB_LOAN_HISTORIES
		SET
			LOAN_STATUS = 'P',
			RETURN_DATE = SYSDATE
		WHERE
			LOAN_NO = #{lno}
	</update>
    <!-- 
        [임시] List<LoanHistory> tempGetAllPendingReturns();
        (이 쿼리는 나중에 반드시 검토 및 수정되어야 합니다.)
        모든 사용자의 '반납 처리 중'(LOAN_STATUS = 'P')인 대출 기록 목록을 반환한다.
        LoanHistory VO의 중첩된 User, Book, Library 객체에 필요한 최소 정보를 매핑한다.
     -->
    <select id="tempGetAllPendingReturns" resultType="LoanHistory">
        SELECT
            L.LOAN_NO                   AS no,
            L.LOAN_DATE                 AS loanDate,
            L.RETURN_DATE               AS returnDate,
            L.DUE_DATE                  AS dueDate,
            L.LOAN_STATUS               AS loanStatus,
            L.IS_EXTENSION              AS isExtension,
            
            U.USER_ID                   AS "user.id",
            U.USER_NAME                 AS "user.name",
            
            B.BOOK_NO                   AS "book.no",
            B.BOOK_TITLE                AS "book.title",
            B.BOOK_AUTHOR               AS "book.author",
            B.BOOK_PUBLISHER            AS "book.publisher",
            B.BOOK_COVER_IMAGE_PATH     AS "book.coverImagePath",
            
            LIB.LIB_NO                  AS "library.no",     -- Library 객체의 no 필드에 매핑
            LIB.LIB_NAME                AS "library.name"    -- 필요하다면 도서관 이름도 추가 (Library VO에 name 필드 있음)
        FROM
            BOOKHUB_LOAN_HISTORIES L
        INNER JOIN
            BOOKHUB_USERS U ON L.USER_ID = U.USER_ID
        INNER JOIN
            BOOKHUB_BOOKS B ON L.BOOK_NO = B.BOOK_NO
        INNER JOIN                                        -- Library 테이블과 JOIN 추가
            BOOKHUB_LIBRARIES LIB ON L.LIB_NO = LIB.LIB_NO -- L.LIB_NO 컬럼을 사용한다고 가정
        WHERE
            L.LOAN_STATUS = 'P'
        ORDER BY
            L.RETURN_DATE ASC, L.LOAN_NO ASC
    </select>
</mapper>
