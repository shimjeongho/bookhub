<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="kr.co.bookhub.mapper.RecommendBooksMapper">
	
	<!-- 카테고리 -->
	<resultMap type="Category" id="CategoryResultMap">
		<id				column="CATEGORY_NO"			property="no"/>
		<result			column="CATEGORY_NAME"			property="name"/>
	</resultMap>
	
	<!-- 도서 -->
	<resultMap type="Book" id="BookResultMap">
		<id				column="BOOK_NO"				property="no"/>
		<result			column="BOOK_TITLE"				property="title"/>
		<result			column="BOOK_AUTHOR"			property="author"/>
		<result			column="BOOK_PUBLISHER"			property="publisher"/>
		<result			column="BOOK_DESCRIPTION"		property="description"/>
		<result			column="BOOK_PUB_DATE"			property="pubDate"/>
		<result			column="BOOK_REVIEW_COUNT"		property="reviewCount"/>
		<result			column="BOOK_REVIEW_AVG"		property="reviewAvg"/>
		<result			column="BOOK_COVER_IMAGE_PATH"	property="coverImagePath"/>
		<result			column="BOOK_CREATED_DATE"		property="createdDate"/>
		<result			column="BOOK_UPDATED_DATE"		property="updatedDate"/>
		<result			column="BOOK_ISBN"				property="isbn"/>
		<result			column="RECOMMEND_BY"			property="recommendBy"/>
		<association 	resultMap="CategoryResultMap"	property="category" />
	</resultMap>
	
	 <!-- 로그인 유저의 대여 목록 개수 조회
	 * @param userId 로그인 유저 아이디
	 * @return 대여 목록 개수
	int getTotalLoanHistoryRows(String userId) -->
	<select id="getTotalLoanHistoryRows" resultType="int" useCache="false" flushCache="true">
		SELECT 
			COUNT(*)
		FROM 
			BOOKHUB_LOAN_HISTORIES
		WHERE
			USER_ID = #{userId}
	</select>

	 <!-- 로그인 유저의 대여 도서 정보로 맞춤 도서 목록 가져오기
	 * @param userId 로그인 유저 아이디
	 * @param userLoanCnt 로그인 유저가 대여한 도서 개수
	 * @return 맞춤 도서 목록
	List<Book> getRecommendBooksByUserId(String userId, int userLoanCnt) -->
	<select id="getRecommendBooksByUserId" resultMap="BookResultMap">
		<choose>
			<!-- 로그인 유저의 대여 이력 여부 -->
			<when test="userLoanCnt > 0">
				WITH 
					<!-- 내가 대여한 도서와 찜 목록 도서 번호 목록 -->
					my_loan_and_wishlist_books AS ( 
						<!-- 내가 대여한 도서 번호 목록 -->
						SELECT 
							BOOK_NO
						FROM 
							BOOKHUB_LOAN_HISTORIES
			    		WHERE 
			    			USER_ID = #{userId}
		    			UNION <!-- 중복 제거 포함된 합집합 -->
		    			<!-- 내가 찜한 도서 번호 목록 -->
		    			SELECT 
		    				BOOK_NO
	    				FROM 
	    					BOOKHUB_WISHLIST
    					WHERE 
    						USER_ID = #{userId}
					), 
					<!-- 내가 대여 및 찜한 도서의 카테고리 목록 -->
					my_loan_and_wishlist_categories AS (
						SELECT
							DISTINCT CATEGORY_NO
						FROM 
							BOOKHUB_BOOKS 
						WHERE 
							BOOK_NO IN (SELECT BOOK_NO FROM my_loan_and_wishlist_books)
					),
					<!-- 내가 대여 및 찜한 도서의 상위 카테고리 목록 -->
					my_loan_and_wishlist_parents_categories AS (
						SELECT
							DISTINCT CATEGORY_PARENTS_NO
						FROM 
							BOOKHUB_CATEGORIES
						WHERE 
							CATEGORY_NO IN (SELECT CATEGORY_NO FROM my_loan_and_wishlist_categories)
						AND 
							CATEGORY_PARENTS_NO IS NOT NULL
					),
					<!-- 나와 같은 도서을 대여 및 찜한 유저 아이디 목록 -->
					similar_users AS ( 
						<!-- 나와 같은 도서를 대여한 유저 목록 -->
						SELECT 
							USER_ID
						FROM 
							BOOKHUB_LOAN_HISTORIES
						WHERE 
							BOOK_NO IN (SELECT BOOK_NO FROM my_loan_and_wishlist_books)
						AND
							USER_ID != #{userId}
						UNION <!-- 중복 제거 포함된 합집합 -->
						<!-- 나와 같은 도서를 찜한 유저 목록 -->
						SELECT	
							USER_ID
						FROM
							BOOKHUB_WISHLIST
						WHERE
							BOOK_NO IN (SELECT BOOK_NO FROM my_loan_and_wishlist_books)
						AND
							USER_ID != #{userId}
					),
					<!-- 나와 같은 도서를 대여 및 찜한 유저의 대여 및 찜한 도서 목록(내가 대여 및 찜한 도서 번호 제외) -->
					recommend_books_by_user AS ( 
						SELECT
							HB.BOOK_NO
							, COUNT(*) * 10 AS PRIORITY <!-- 유사 사용자 수에 따른 가중치 -->
							, '유사 사용자 도서' AS RECOMMEND_BY 
						FROM 
							BOOKHUB_LOAN_HISTORIES HB
						WHERE 
							HB.USER_ID IN (SELECT USER_ID FROM similar_users)
						AND
							HB.BOOK_NO NOT IN (SELECT BOOK_NO FROM my_loan_and_wishlist_books)
						GROUP BY 
							HB.BOOK_NO
					),
					<!-- 내가 대여 및 찜한 도서와 같은 하위 카테고리 도서 목록(내가 대여 및 찜한 도서 번호 제외) -->
					recommend_books_by_same_category AS ( 
						SELECT
							CB.BOOK_NO
							, (
								(SELECT COUNT(*) FROM BOOKHUB_LOAN_HISTORIES WHERE BOOK_NO = CB.BOOK_NO) 
								+ (SELECT COUNT(*) FROM BOOKHUB_WISHLIST WHERE BOOK_NO = CB.BOOK_NO)
							) * 5 AS PRIORITY <!-- 관심 카테고리 기준 대여 횟수 + 찜수 기반 가중치 -->
							, '분류 유사 도서' AS RECOMMEND_BY 
						FROM 
							BOOKHUB_BOOKS CB
						WHERE 
							CB.CATEGORY_NO IN (SELECT CATEGORY_NO FROM my_loan_and_wishlist_categories)
						AND
							CB.BOOK_NO NOT IN (SELECT BOOK_NO FROM my_loan_and_wishlist_books)
					),
					<!-- 내가 대여 및 찜한 도서의 상위 카테고리 도서 목록(내가 대여 및 찜한 도서 번호 제외) -->
					recommend_books_by_parents_category AS ( 
						SELECT
							PCB.BOOK_NO
							, (
								(SELECT COUNT(*) FROM BOOKHUB_LOAN_HISTORIES WHERE BOOK_NO = PCB.BOOK_NO) +
      							(SELECT COUNT(*) FROM BOOKHUB_WISHLIST WHERE BOOK_NO = PCB.BOOK_NO)
							) * 1 AS PRIORITY <!-- 관심 상위 카테고리 기준 대여 횟수 + 찜수 기반 가중치 -->
							, '대분류 유사 도서' AS RECOMMEND_BY 
						FROM 
							BOOKHUB_BOOKS PCB
							, BOOKHUB_CATEGORIES C
						WHERE 
							PCB.CATEGORY_NO = C.CATEGORY_NO
						AND 
							C.CATEGORY_PARENTS_NO IN (SELECT CATEGORY_PARENTS_NO FROM my_loan_and_wishlist_parents_categories)
						AND
							PCB.BOOK_NO NOT IN (SELECT BOOK_NO FROM my_loan_and_wishlist_books)
					)
				<!-- 전체 추천 도서 통합 -->
				SELECT
					RB.BOOK_NO
					, RB.BOOK_TITLE
					, RB.BOOK_AUTHOR
					, RB.BOOK_PUBLISHER
					, RB.BOOK_DESCRIPTION
					, RB.BOOK_PUB_DATE
					, RB.BOOK_REVIEW_COUNT
					, RB.BOOK_REVIEW_AVG
					, RB.BOOK_COVER_IMAGE_PATH
					, RB.BOOK_CREATED_DATE
					, RB.BOOK_UPDATED_DATE
					, RB.BOOK_ISBN
					, C.CATEGORY_NO
					, C.CATEGORY_NAME
					, R.PRIORITY
					, R.RECOMMEND_BY
					<!-- 내가 대여한 도서 카테고리와 일치 여부 -->
					, CASE
						WHEN RB.CATEGORY_NO IN (SELECT CATEGORY_NO FROM my_loan_and_wishlist_categories) THEN 1
						ELSE 0
					END AS CATEGORY_MATCH
				FROM 
					<!-- 중복을 제거한 테이블 병합(모두 BOOK_NO가 선택됨) -->
					(
						SELECT
							BOOK_NO,
						    PRIORITY,
						    RECOMMEND_BY 
					    FROM 
					    	recommend_books_by_user
						UNION
						SELECT 
							BOOK_NO,
						    PRIORITY,
						    RECOMMEND_BY 
					    FROM 
					    	recommend_books_by_same_category
					    UNION
					    SELECT 
					    	BOOK_NO,
						    PRIORITY,
						    RECOMMEND_BY 
					    FROM 
					    	recommend_books_by_parents_category
					) R
					, BOOKHUB_BOOKS RB
					, BOOKHUB_CATEGORIES C
				WHERE
					R.BOOK_NO = RB.BOOK_NO
				AND 
					RB.CATEGORY_NO = C.CATEGORY_NO
				ORDER BY
					CASE
						R.RECOMMEND_BY
						WHEN '유사 사용자 도서' THEN 3	
						WHEN '분류 유사 도서' THEN 2
						WHEN '대분류 유사 도서' THEN 1
						ELSE 0	
					END DESC						<!-- 유사도 우선 순위 -->
					, R.PRIORITY DESC          		<!-- 가중치 -->
					, CATEGORY_MATCH DESC			<!-- 카테고리 일치 -->
					, RB.BOOK_REVIEW_COUNT DESC 	<!-- 리뷰수 -->
					, RB.BOOK_REVIEW_AVG DESC		<!-- 리뷰 평점 -->
					, RB.BOOK_PUB_DATE DESC			<!-- 출판일 -->
				FETCH FIRST 20 ROWS ONLY
			</when> 
			<!-- 로그인 상태가 아니거나 대여 이력이 없을 경우 -->
			<otherwise>
				WITH
					review_based AS (
						SELECT
							B.BOOK_NO
							, B.BOOK_TITLE
							, B.BOOK_AUTHOR
							, B.BOOK_PUBLISHER
							, B.BOOK_DESCRIPTION
							, B.BOOK_PUB_DATE
							, B.BOOK_REVIEW_COUNT
							, B.BOOK_REVIEW_AVG
							, B.BOOK_COVER_IMAGE_PATH
							, B.BOOK_CREATED_DATE
							, B.BOOK_UPDATED_DATE
							, B.BOOK_ISBN
							, C.CATEGORY_NO
							, C.CATEGORY_NAME
							, 0 AS PRIORITY
							, 0 AS CATEGORY_MATCH
		                    , '리뷰수 추천 도서' AS RECOMMEND_BY
	                    FROM 
	                    	BOOKHUB_BOOKS B	
	                    	,BOOKHUB_CATEGORIES C
                    	WHERE
                    		B.CATEGORY_NO = C.CATEGORY_NO
                   		AND
                   			B.BOOK_REVIEW_COUNT >= 1
					),
					pub_date_based AS (
						SELECT
							B.BOOK_NO
							, B.BOOK_TITLE
							, B.BOOK_AUTHOR
							, B.BOOK_PUBLISHER
							, B.BOOK_DESCRIPTION
							, B.BOOK_PUB_DATE
							, B.BOOK_REVIEW_COUNT
							, B.BOOK_REVIEW_AVG
							, B.BOOK_COVER_IMAGE_PATH
							, B.BOOK_CREATED_DATE
							, B.BOOK_UPDATED_DATE
							, B.BOOK_ISBN
							, C.CATEGORY_NO
							, C.CATEGORY_NAME
							, 0 AS PRIORITY
							, 0 AS CATEGORY_MATCH
		                    , '최신 도서 추천' AS RECOMMEND_BY
	                    FROM 
	                    	BOOKHUB_BOOKS B	
	                    	,BOOKHUB_CATEGORIES C
                    	WHERE
                    		B.CATEGORY_NO = C.CATEGORY_NO
                   		AND
                   			B.BOOK_NO NOT IN (SELECT BOOK_NO FROM review_based)
                    	ORDER BY 
		                    B.BOOK_PUB_DATE DESC
		                FETCH FIRST 20 ROWS ONLY
					)
				SELECT *
				FROM
					(
						SELECT * FROM review_based
						UNION
						SELECT * FROM pub_date_based
					)
				ORDER BY 
					BOOK_REVIEW_COUNT DESC
					, BOOK_REVIEW_AVG DESC
					, BOOK_PUB_DATE DESC
				FETCH FIRST 20 ROWS ONLY
			</otherwise>
		</choose>
	</select>
	
</mapper>