<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.bookhub.mapper.PostMapper">

	<resultMap type="Book" id="bookResultMap">
		<id     column="BOOK_NO" 				property="no"/>
		<result column="BOOK_TITLE" 			property="title"/>
		<result column="BOOK_AUTHOR" 			property="author"/>
		<result column="BOOK_PUBLISHER" 		property="publisher"/>
		<result column="BOOK_DESCRIPTION" 		property="description"/>
		<result column="BOOK_PUB_DATE" 			property="pubDate"/>
		<result column="BOOK_REVIEW_COUNT" 		property="reviewCount"/>
		<result column="REVIEW_AVG" 			property="reviewAvg"/>
		<result column="BOOK_COVER_IMAGE_PATH"  property="coverImagePath"/>
		<result column="BOOK_CREATED_DATE" 		property="createdDate"/>
		<result column="BOOK_UPDATED_DATE" 		property="updatedDate"/>
		<result column="BOOK_ISBN" 				property="isbn"/>
	</resultMap>
	
	<resultMap type="Post" id="postResultMap">
		<id 	column="POST_NO" 					property="no"/>
		<result column="POST_TITLE" 				property="title"/>
		<result column="POST_CONTENT" 				property="content"/>
		<result column="POST_VIEW_CNT" 				property="viewCnt"/>
		<result column="POST_CREATED_DATE"  		property="createdDate"/>
		<result column="POST_UPDATED_DATE"  		property="updatedDate"/>
		<result column="IS_DELETED" 				property="isDeleted"/>
		<result column="IS_PUBLIC" 					property="isPublic"/>
		<result column="USER_ID" 					property="user.id"/>
		<result column="BOOK_NO" 					property="book.no"/>
		<result column="LIB_NO" 					property="library.no"/>
		<result column="POST_CATE_NO"				property="postCategory.no"/>
		
		<association javaType="Book" 				property="book">
			<id 	column="BOOK_NO" 				property="no"/>
			<result column="BOOK_TITLE" 			property="title"/>		
			<result column="BOOK_AUTHOR" 			property="author"/>		
			<result column="BOOK_PUBLISHER" 		property="publisher"/>		
			<result column="BOOK_DESCRIPTION" 		property="description"/>		
			<result column="BOOK_PUB_DATE" 			property="pubDate"/>		
			<result column="BOOK_REVIEW_COUNT" 		property="reviewCount"/>
			<result column="BOOK_REVIEW_AVG" 		property="reviewAvg"/>
			<result column="BOOK_COVER_IMAGE_PATH"  property="coverImagePath"/>		
			<result column="BOOK_CREATED_DATE" 		property="createdDate"/>		
			<result column="BOOK_UPDATED_DATE" 		property="updatedDate"/>		
			<result column="BOOK_ISBN" 		        property="isbn"/>		
		</association>
		
		<association javaType="User" 				property="user">
			<id 	column="USER_ID" 				property="id"/>
			<result column="USER_PASSWORD" 			property="password"/>
			<result column="USER_NAME" 				property="name"/>
			<result column="USER_PHONE" 			property="phone"/>
			<result column="USER_BIRTH" 			property="birth"/>
			<result column="USER_CREATED_DATE" 		property="created_date"/>
			<result column="USER_UPDATED_DATE" 		property="updated_date"/>
			<result column="IS_DELETED" 			property="isDeleted"/>
		</association>
		
		<association javaType="Library"      		property="library">
			<id 	column="LIB_NO" 				property="no"/> 
			<result column="LIB_NAME" 				property="name"/>
			<result column="LIB_LOCATION" 			property="location"/>
			<result column="LIB_LONGITUDE" 			property="longitude"/>
			<result column="LIB_LATITUDE" 			property="latitude"/>
			<result column="LIB_TEL" 				property="tel"/>
			<result column="LIB_IMG_PATH" 			property="imgPath"/>
			<result column="LIB_BUSINESS_HOURS" 	property="businessHours"/>
		</association>
		
	</resultMap>
	

	
	<!-- public List<Book> bookKeywordSearch(String keyword); 
		=> 입력된 키워드가 해당되는 모든 도서들을 조회 -->
	<select id="bookKeywordSearch" resultMap="bookResultMap">
		select 
			   b.BOOK_NO 
		      ,b.BOOK_TITLE 
		      ,b.BOOK_AUTHOR 
		      ,b.BOOK_PUBLISHER 
		      ,b.BOOK_DESCRIPTION 
		      ,b.BOOK_PUB_DATE 
		      ,b.BOOK_REVIEW_COUNT 
		      ,b.BOOK_REVIEW_AVG 
		      ,b.BOOK_COVER_IMAGE_PATH 
		      ,b.BOOK_CREATED_DATE 
		      ,b.BOOK_UPDATED_DATE 
		      ,b.BOOK_ISBN 
		from  BOOKHUB_BOOKS b , BOOKHUB_KEYWORDS k
		where b.book_no = k.book_no
	    and k.KEYWORD like '%' || #{keyword} || '%' 
	 </select>
	 
	 <!-- public List<Book> userLoanBookSearch(String userId); 
	 	=> 사용자가 대여한 도서들을 조회 - 사용자 아이디 필요. --> 
	 <select id="userLoanBookSearch" resultMap="bookResultMap">
	 	select
	 		 b.BOOK_NO
	 		,b.BOOK_TITLE 
	 		,b.BOOK_AUTHOR 
	 		,b.BOOK_PUBLISHER
	 		,b.BOOK_DESCRIPTION 
	 		,b.BOOK_PUB_DATE
	 		,b.BOOK_REVIEW_COUNT
	 		,b.BOOK_REVIEW_AVG
	 		,b.BOOK_COVER_IMAGE_PATH
	 		,b.BOOK_CREATED_DATE
	 		,b.BOOK_UPDATED_DATE
	 		,b.BOOK_ISBN
	 	from
	 		BOOKHUB_BOOKS b , BOOKHUB_LOAN_HISTORIES l, BOOKHUB_USERS u
	 	where 
	 		l.LOAN_STATUS = 'L' AND
	 		b.BOOK_NO = l.BOOK_NO and 
	 		u.USER_ID = l.USER_ID and 
	 		u.USER_ID = #{userId}
	 </select>
	 
	 <!-- public List<PostCategory> selectPostCategoryInfo(); 
	      => 문의 유형에 대한 고유 번호와 이름을 조회. --> 
	 <select id="selectPostCategoryInfo" resultType="PostCategory">
	 	SELECT
	 		 POST_CATE_NO 		AS no 
	 		,POST_CATE_NAME 	AS name
	 	FROM 
	 		BOOKHUB_POST_CATEGORIES
	 </select>
	 
	<!-- public List<Post> getPosts(Map<String, Object> searchParam);
	   => 모든 게시글들을 조회한다. --> 
	 <select id="getPosts" parameterType="map" resultMap="postResultMap">
		select 
		     p.POST_NO 
		    ,p.POST_TITLE 
		    ,b.BOOK_TITLE 
		    ,u.USER_NAME 
		    ,p.POST_CREATED_DATE 
		    ,p.POST_VIEW_CNT 
		    ,p.IS_PUBLIC 
		    ,u.USER_ID 
		    ,p.POST_UPDATED_DATE 	
		from 
		    BOOKHUB_POSTS p, BOOKHUB_BOOKS b, BOOKHUB_USERS u
		where 
		    p.USER_ID = u.USER_ID 
		    and b.BOOK_NO = p.BOOK_NO
		    and p.IS_DELETED = 'N'
		    and p.POST_CATE_NO = #{postCateNo}
		<if test="'title' == searchType">
			and p.POST_TITLE LIKE '%'|| #{searchKeyword} ||'%'
		</if>
		<if test="'user' == searchType">
			and u.USER_NAME LIKE '%' || #{searchKeyword} ||'%'
		</if>	
		<choose>
			<when test="sort == 'newest' ">
				ORDER BY P.POST_CREATED_DATE DESC
			</when> 
			<when test="sort == 'views' ">
				ORDER BY P.POST_VIEW_CNT DESC
			</when>
		</choose>
		offset #{offset} rows
		fetch next #{rows} rows only
	 </select> 
	 
	 <!-- public int getTotalRows(Map<String, Object> searchParam); 
	     => 게시글의 전체 데이터 개수를 조회할 수 있다.--> 
	 <select id="getTotalRows" parameterType="map"> 
		SELECT 
			COUNT(*)
		FROM 
			BOOKHUB_POSTS
		WHERE 
			POST_CATE_NO = #{postCateNo}
			AND IS_DELETED = 'N'
	 </select>
	 
	 <!-- public Post selectPostBypostNo(int postNo); 
	 	=> 게시글 번호를 전달받아, 해당 번호를 가진 게시글 하나의 모든 정보를 가져온다.
	 	=> 도서 표지, 제목, 저자, 출판사, 출판일 
	 	=> 사용자 이름과 사용자 아이디도 전부 가져온다. -->
	 <select id="selectPostBypostNo" resultMap="postResultMap"> 
		select
			 p.POST_NO 
	 		,p.POST_TITLE  
	 		,p.POST_CONTENT  
	 		,p.POST_VIEW_CNT  
	 		,p.POST_CREATED_DATE  
	 		,p.POST_UPDATED_DATE  
	 		,p.IS_DELETED  
	 		,p.IS_PUBLIC  
	 		,p.USER_ID  
	 		,p.BOOK_NO  
	 		,p.POST_CATE_NO 
	 		,b.BOOK_TITLE  
	 		,b.BOOK_AUTHOR  
	 		,b.BOOK_PUBLISHER  
	 		,b.BOOK_PUB_DATE  
	 		,b.BOOK_COVER_IMAGE_PATH 
	 		,u.USER_NAME 
		from        
		    BOOKHUB_POSTS p, BOOKHUB_BOOKS b, BOOKHUB_USERS u 
		where 
		    p.BOOK_NO = b.BOOK_NO AND
		    p.USER_ID = u.USER_ID AND
		    p.POST_NO = #{postNo}
	 </select>
	 
	 
	 
	 <!-- public void insertBookPost(Post post);  --> 
	  <insert id="insertBookPost" parameterType="Post">
	 	INSERT INTO BOOKHUB_POSTS 
		 	( POST_NO
		 	 ,POST_TITLE 
		 	 ,POST_CONTENT 
		 	 ,USER_ID
		 	 ,BOOK_NO
		 	 ,POST_CATE_NO
		 	 ,IS_PUBLIC)
	 	VALUES
	 		( BOOKHUB_POSTS_POST_NO_SEQ.nextval 
		 	 ,#{title} 
		 	 ,#{content} 
		 	 ,#{user.id} 
		 	 ,#{book.no} 
		 	 ,#{postCategory.no}
		 	 ,#{isPublic} )
	 </insert>  
	 
	 <!-- public void updatePost(Post post); 
	 	=> 게시글의 정보를 가져와서, 게시글의 정보를 수정한다.  -->
	 <update id="updatePost" parameterType="Post"> 
	 	UPDATE BOOKHUB_POSTS
	 	set
	 		 POST_TITLE = #{title} 
	 		,POST_CONTENT = #{content} 
	 		,POST_VIEW_CNT = #{viewCnt} 
	 		,POST_CREATED_DATE = #{createdDate} 
	 		,POST_UPDATED_DATE = SYSDATE 
	 		,IS_DELETED = #{isDeleted} 
	 		,IS_PUBLIC = #{isPublic} 
	 		,BOOK_NO = #{book.no} 
	 		,LIB_NO = #{library.no} 
	 		,POST_CATE_NO = #{postCategory.no}
	 	WHERE 
	 		POST_NO = #{no} AND
	 		USER_ID = #{user.id}
	 </update> 
	 
	 <!-- public void insertPostReply(PostReply postReply); 
	 	 => 게시글의 댓글을 등록하는 쿼리--> 
	 <insert id="insertPostReply" parameterType="PostReply">
		INSERT INTO BOOKHUB_POST_REPLIES
			(REPLY_NO 
			 ,REPLY_CONTENT 
			 ,USER_ID 
			 ,POST_NO
			 ,PARENT_NO) 
		VALUES 
			( BOOKHUB_POST_REPLIES_REPLY_NO_SEQ.NEXTVAL
			 ,#{content} 
			 ,#{user.id} 
			 ,#{post.no}
			 ,#{postReply.no})
	 </insert>
	 
	 <!-- public void updatePostReply(PostReply postReply); -->
	 <update id="updatePostReply" parameterType="PostReply">
	 	UPDATE BOOKHUB_POST_REPLIES
		 	SET
		 		 REPLY_NO = #{no}
		 		,PARENT_NO = #{postReply.no}
		 		,REPLY_CONTENT = #{content}
		 		,REPLY_CREATED_DATE = #{createdDate}
		 		,REPLY_UPDATED_DATE = SYSDATE
		 		,IS_DELETED = #{isDeleted}
		 		,USER_ID = #{user.id}
		 		,POST_NO = #{post.no} 
		 	WHERE 
		 		REPLY_NO = #{no} AND 
		 		USER_ID = #{user.id}
	 </update>
	 
	 <!-- public PostReply getPostReply(int postReplyNo); --> 
	 <select id="getPostReply" resultType="PostReply">
	 	SELECT
	 		 REPLY_NO 					AS no	 
	 		,PARENT_NO 					AS "postReply.no"
	 		,REPLY_CONTENT 				AS content
	 		,REPLY_CREATED_DATE 		AS createdDate
	 		,REPLY_UPDATED_DATE 		AS updatedDate
	 		,IS_DELETED 				AS isDeleted
	 		,USER_ID 					AS "user.id"
	 		,POST_NO 					AS "post.no"
	 	FROM 
	 		BOOKHUB_POST_REPLIES
	 	WHERE
	 		REPLY_NO = #{postReplyNo} AND 
	 		POST_NO = #{postNo}
	 </select>
	 
	 <!--public List<PostReply> getPostReplies(Map<String, Object> condition);  -->
	 <select id="getParentPostReplies" parameterType="map" resultType="PostReply"> 
            SELECT
                 RP.REPLY_NO							AS no
                ,RP.PARENT_NO 							AS "postReply.no" 
                ,RP.REPLY_CONTENT 						AS content 
                ,RP.REPLY_CREATED_DATE 					AS createdDate 
                ,RP.REPLY_UPDATED_DATE 					AS updatedDate 
                ,RP.USER_ID 							AS "user.id" 
                ,RP.POST_NO 							AS "post.no" 
                ,RP.IS_DELETED							AS isDeleted
                ,U.USER_NAME							AS "user.name"
            FROM 
                 BOOKHUB_POST_REPLIES RP
                ,BOOKHUB_USERS U 
                ,BOOKHUB_POSTS P 
            WHERE 
                RP.USER_ID = U.USER_ID AND
                RP.POST_NO = P.POST_NO AND
                RP.POST_NO = #{postNo} AND 
                RP.PARENT_NO IS NULL
            offset #{offset} rows
			fetch next #{rows} rows only            
	 </select>
	 
	 <!--public List<PostReply> getChildPostReplies(Map<String, Object> condition); 
	     자식 댓글을 조회하기 -->
	 <select id="getChildPostReplies" parameterType="map" resultType="PostReply"> 
            SELECT
                 RP.REPLY_NO							AS no
                ,RP.PARENT_NO 							AS "postReply.no" 
                ,RP.REPLY_CONTENT 						AS content 
                ,RP.REPLY_CREATED_DATE 					AS createdDate 
                ,RP.REPLY_UPDATED_DATE 					AS updatedDate 
                ,RP.USER_ID 							AS "user.id" 
                ,RP.POST_NO 							AS "post.no" 
                ,RP.IS_DELETED							AS isDeleted
                ,U.USER_NAME							AS "user.name"
            FROM 
                 BOOKHUB_POST_REPLIES RP
                ,BOOKHUB_USERS U 
                ,BOOKHUB_POSTS P 
            WHERE 
                RP.USER_ID = U.USER_ID AND
                RP.POST_NO = P.POST_NO AND
                RP.PARENT_NO = #{postReplyNo} AND 
                RP.PARENT_NO IS NOT NULL
	 </select>
	 
	 <!-- public int totalRowsParentReply(Map<String, Object> conditon); -->
	 <select id="totalRowsParentReply" parameterType="map">
            SELECT
            	COUNT(*)
            FROM 
                 BOOKHUB_POST_REPLIES RP
                ,BOOKHUB_USERS U 
                ,BOOKHUB_POSTS P 
            WHERE 
                RP.USER_ID = U.USER_ID AND
                RP.POST_NO = P.POST_NO AND
                RP.POST_NO = #{postNo} AND 
                RP.PARENT_NO IS NULL	 
	 </select>
	 
	 <!-- public List<Post> getLibPosts(Map<String, Object> condition); --> 
	 <select id="getLibPosts" parameterType="map" resultMap="postResultMap">
		select 
		     p.POST_NO 
		    ,p.POST_TITLE 
		    ,l.LIB_NAME
		    ,u.USER_NAME 
		    ,p.POST_CREATED_DATE 
		    ,p.POST_VIEW_CNT 
		    ,p.IS_PUBLIC 
		    ,u.USER_ID 
		    ,p.POST_UPDATED_DATE 	
		from 
		    BOOKHUB_POSTS p, BOOKHUB_LIBRARIES l, BOOKHUB_USERS u
		where 
		    p.USER_ID = u.USER_ID AND 
		    p.LIB_NO = l.LIB_NO AND
		    p.IS_DELETED = 'N' AND
		    p.POST_CATE_NO = #{postCateNo}
		<if test="'title' == searchType">
			and p.POST_TITLE LIKE '%'|| #{searchKeyword} ||'%'
		</if>
		<if test="'user' == searchType">
			and u.USER_NAME LIKE '%' || #{searchKeyword} ||'%'
		</if>	
		<choose>
			<when test="sort == 'newest' ">
				ORDER BY P.POST_CREATED_DATE DESC
			</when> 
			<when test="sort == 'views' ">
				ORDER BY P.POST_VIEW_CNT DESC
			</when>
		</choose>
		offset #{offset} rows
		fetch next #{rows} rows only
	 </select> 
	 
	 <!-- public Post getLibPostBypostNo(int postNo); -->
	 <select id="getLibPostBypostNo" resultType="Post"> 
		select
			 p.POST_NO 				as no
	 		,p.POST_TITLE   		as title
	 		,p.POST_CONTENT  		as content
	 		,p.POST_VIEW_CNT  		as viewCnt
	 		,p.POST_CREATED_DATE  	as createdDate
	 		,p.POST_UPDATED_DATE  	as updatedDate
	 		,p.IS_DELETED  			as isDeleted
	 		,p.IS_PUBLIC  			as isPublic
	 		,p.USER_ID  			as "user.id"
	 		,p.POST_CATE_NO 		as "postCategory.no"
	 		,u.USER_NAME 			as "user.name"
	 		,l.LIB_NO				as "library.no"
	 		,l.LIB_NAME				as "library.name"
	 		,l.LIB_LOCATION			as "library.location"
	 		,l.LIB_TEL				as "library.tel" 
	 		,l.LIB_IMG_PATH			as "library.imgPath"
	 		,l.LIB_BUSINESS_HOURS   as "library.businessHours"
		from        
		    BOOKHUB_POSTS p,BOOKHUB_LIBRARIES l , BOOKHUB_USERS u 
		where 
		    p.LIB_NO = l.LIB_NO AND
		    p.USER_ID = u.USER_ID AND
		    p.POST_NO = #{postNo}
	 </select>
	 
	 <!--public List<Library> getLibraries();  -->
	 <select id="getLibraries" resultType="Library">
	 	SELECT
	 		 LIB_NO       			as no
	 		,LIB_NAME	  			as name
	 		,LIB_LOCATION			as location
	 		,LIB_TEL				as tel
	 		,LIB_IMG_PATH			as imgPath
	 		,LIB_BUSINESS_HOURS		as businessHours
	 	FROM 
	 		BOOKHUB_LIBRARIES
	 </select>
	 
	 <!-- public void insertLibPost(Post post); -->
	<insert id="insertLibPost" parameterType="Post">
	 	INSERT INTO BOOKHUB_POSTS 
		 	( POST_NO
		 	 ,POST_TITLE 
		 	 ,POST_CONTENT 
		 	 ,USER_ID
		 	 ,LIB_NO
		 	 ,POST_CATE_NO
		 	 ,IS_PUBLIC)
	 	VALUES
	 		( BOOKHUB_POSTS_POST_NO_SEQ.nextval
		 	 ,#{title} 
		 	 ,#{content} 
		 	 ,#{user.id} 
		 	 ,#{library.no} 
		 	 ,#{postCategory.no}
		 	 ,#{isPublic} )
	 </insert> 
	 
	 <!-- public void insertSystemPost(Post post); -->
	 <insert id="insertSystemPost" parameterType="Post">
	 	INSERT INTO BOOKHUB_POSTS 
		 	( POST_NO
		 	 ,POST_TITLE 
		 	 ,POST_CONTENT 
		 	 ,USER_ID
		 	 ,POST_CATE_NO
		 	 ,IS_PUBLIC)
	 	VALUES
	 		( BOOKHUB_POSTS_POST_NO_SEQ.nextval
		 	 ,#{title} 
		 	 ,#{content} 
		 	 ,#{user.id} 
		 	 ,#{postCategory.no}
		 	 ,#{isPublic} )
	 </insert>
	 
	 <!-- public void getSystemPost(Map<String, Object> condition); -->
	 	 <select id="getSystemPost" parameterType="map" resultMap="postResultMap">
			select 
			     p.POST_NO 
			    ,p.POST_TITLE 
			    ,u.USER_NAME 
			    ,p.POST_CREATED_DATE 
			    ,p.POST_VIEW_CNT 
			    ,p.IS_PUBLIC 
			    ,u.USER_ID 
			    ,p.POST_UPDATED_DATE 	
			from 
			    BOOKHUB_POSTS p, BOOKHUB_USERS u
			where 
			    p.USER_ID = u.USER_ID AND 
			    p.IS_DELETED = 'N' AND
			    p.POST_CATE_NO = #{postCateNo}
			<if test="'title' == searchType">
				and p.POST_TITLE LIKE '%'|| #{searchKeyword} ||'%'
			</if>
			<if test="'user' == searchType">
				and u.USER_NAME LIKE '%' || #{searchKeyword} ||'%'
			</if>	
			<choose>
				<when test="sort == 'newest' ">
					ORDER BY P.POST_CREATED_DATE DESC
				</when> 
				<when test="sort == 'views' ">
					ORDER BY P.POST_VIEW_CNT DESC
				</when>
			</choose>
			offset #{offset} rows
			fetch next #{rows} rows only
	 </select> 
	 
	 <!-- public Post getSystemPostByPostNo(int postNo); -->
     <select id="getSystemPostByPostNo" resultMap="postResultMap"> 
		SELECT
			 P.POST_NO 
			,P.POST_TITLE
			,P.POST_CONTENT
			,P.POST_VIEW_CNT
			,P.POST_CREATED_DATE
			,P.POST_UPDATED_DATE
			,IS_PUBLIC
			,P.USER_ID
			,P.POST_CATE_NO
			,U.USER_NAME
			,P.IS_DELETED
		FROM 
			BOOKHUB_USERS U, BOOKHUB_POSTS P 
     	WHERE
     		P.USER_ID = U.USER_ID AND 
     		P.POST_NO = #{postNo}	
     </select>
     
     <!-- updatePostViewCnt -->
     <update id="updatePostViewCnt" parameterType="Post">
	 	UPDATE 
	 		BOOKHUB_POSTS
	 	SET
	 		 POST_TITLE = #{title} 
	 		,POST_CONTENT = #{content} 
	 		,POST_VIEW_CNT = #{viewCnt} 
	 		,POST_CREATED_DATE = #{createdDate} 
	 		,IS_DELETED = #{isDeleted} 
	 		,IS_PUBLIC = #{isPublic} 
	 		,BOOK_NO = #{book.no} 
	 		,LIB_NO = #{library.no} 
	 		,POST_CATE_NO = #{postCategory.no}
	 	WHERE 
	 		POST_NO = #{no}
     </update>
     
</mapper>